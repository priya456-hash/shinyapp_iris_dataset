plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = color_palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs width",
xlab = "Petal Length(cm)",
ylab = "Petal Width (cm)")
print(plot)
#plot decision boundary
partition.tree(
tree = model,
label = "Species",
add = TRUE )
#create a confusion matrix
table(
x = predictions,
y = test$Species
)
#predict with the model
predictions <- predict(
object = model,
newdata = test,
type = "class"
)
table.matrix
data("iris")
head(iris)
#set a seed to make randomness reproducible
set.seed(42)
#randomly sample 100 of 150 rows indexes
indexes <- sample(
x = 1:150,
size =100)
#inspect the random indexes
print(indexes)
#create training set from indexes
train <- iris[indexes,]
print(train)
#create test from remaining indexes
test <- iris[-indexes, ]
test
#load decision tree package
library(tree)
#train a decision model
model <- tree(
formula = Species ~ Petal.Length + Petal.Width,
data = train)
#inspect the model
summary(model)
#Visualize the tree model
plot(model)
text(model)
#load color brewer library for making color blind friendly plot
library(RColorBrewer)
#create a color palette
color_palette <- brewer.pal(3, "Set2")
#create scatterplot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = color_palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs width",
xlab = "Petal Length(cm)",
ylab = "Petal Width (cm)")
#plot decision boundary
partition.tree(
tree = model,
label = "Species",
add = TRUE )
#predict with the model
predictions <- predict(
object = model,
newdata = test,
type = "class"
)
#create a confusion matrix
table.matrix <- table(
x = predictions,
y = test$Species
)
table.matrix
library(recipes)
install.packages("recipes")
installed.packages("caret")
install.packages("caret")
#Evaluate the prediction results
cm <- confusionMatrix(
data = predictions,
reference = test$Species
)
install.packages("caret")
install.packages("e1071")  # Needed for certain models and functions in caret
library(caret)
#Evaluate the prediction results
cm <- confusionMatrix(
data = predictions,
reference = test$Species)
cm
#save the training data
save(train, file = "Train.RData")
knitr::opts_chunk$set(echo = TRUE)
install.package("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
ui <- fluidPage("Hello World")
server <- function(input, output){}
shinyApp(
ui = ui,
server = server
)
ui <- fluidPage(
titlePanel("Input and Output"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "num",
label = "Choose a number",
min = 0,
max = 100,
value = 25)),
mainPanel(
textOutput(
outputId = "text"))))
server <- function(input, output){
output$text <- renderText({
paste("you selected", input$num)
})
}
shinyApp(
ui = ui,
server = server
)
library(tree)
load("Train.RData")
load("Train.RData")
load("Train.RData")
getwd()
list.files()
setwd("C:\Users\priya\OneDrive\Documents\data science using R")
setwd("C:/Users/priya/OneDrive/Documents/data science using R")
load("train.RData")
load("Train.RData")
getwd()
#save the training data
save(train, file = "Train.RData")
data("iris")
head(iris)
#set a seed to make randomness reproducible
set.seed(42)
#randomly sample 100 of 150 rows indexes
indexes <- sample(
x = 1:150,
size =100)
#inspect the random indexes
print(indexes)
#create training set from indexes
train <- iris[indexes,]
print(train)
#create test from remaining indexes
test <- iris[-indexes, ]
test
#load decision tree package
library(tree)
#train a decision model
model <- tree(
formula = Species ~ Petal.Length + Petal.Width,
data = train)
#inspect the model
summary(model)
#Visualize the tree model
plot(model)
text(model)
#load color brewer library for making color blind friendly plot
library(RColorBrewer)
#create a color palette
color_palette <- brewer.pal(3, "Set2")
#create scatterplot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = color_palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs width",
xlab = "Petal Length(cm)",
ylab = "Petal Width (cm)")
#plot decision boundary
partition.tree(
tree = model,
label = "Species",
add = TRUE )
#predict with the model
predictions <- predict(
object = model,
newdata = test,
type = "class"
)
#create a confusion matrix
table.matrix <- table(
x = predictions,
y = test$Species
)
table.matrix
#install required packages
library(caret)
library(recipes)
#Evaluate the prediction results
cm <- confusionMatrix(
data = predictions,
reference = test$Species)
cm
#save the tree model
save(model, file = "Tree.RData")
#save the training data
save(train, file = "Train.RData")
load("Train.RData")
load("Tree.RData")
library(RColorBrewer)
library(RColorBrewer)
#create color palette
color.palette <- brewer.pal(3, "Set2")
ui <- fluidPage(
titlePanel("Iris Species Predictor"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "Petal.Length",
label = "Petal Lenght(cm)",
min = 1,
max = 7,
value = 4),
sliderInput(
inputId = "Petal.Width",
label = "Petal Lenght(cm)",
min = 0.0,
max = 2.5,
step = 0.5,
value = 1.5)),
mainPanel(
textOutput(
outputId = "text"),
plotOutput(
outputId = "plot"))))
server <- function(input, output){
output$text = renderText({
#create predictors
predictors <- data.frame(
Petal.Length = input$Petal.Length,
Petal.Width = input$Petal.Width,
Sepal.Length = 0,
Sepal.Width = 0)
#Make prediction
prediction = predict(
object = model,
newdata = predictors,
type = "class")
#create prediction text
paste(
"The predicted species is ",
as.character(prediction))
})
output$plot = renderPlot({
#Create a scatterplot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = color_palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs width",
xlab = "Petal Length(cm)",
ylab = "Petal Width (cm)")
#plot decision boundaries
partition.tree(
tree = model,
label = "Species",
add = TRUE )
#draw predictor on plot
points(
x = input$Petal.Length,
y = input$Petal.Width,
col = "red",
pch = 4,
cex = 2,
lwd = 2)
})
}
shinyApp(
ui = ui,
server = server
)
ui <- fluidPage(
titlePanel("Iris Species Predictor"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "Petal.Length",
label = "Petal Length(cm)",
min = 1,
max = 7,
value = 4),
sliderInput(
inputId = "Petal.Width",
label = "Petal Width(cm)",
min = 0.0,
max = 2.5,
step = 0.5,
value = 1.5)),
mainPanel(
textOutput(
outputId = "text"),
plotOutput(
outputId = "plot"))))
server <- function(input, output){
output$text = renderText({
#create predictors
predictors <- data.frame(
Petal.Length = input$Petal.Length,
Petal.Width = input$Petal.Width,
Sepal.Length = 0,
Sepal.Width = 0)
#Make prediction
prediction = predict(
object = model,
newdata = predictors,
type = "class")
#create prediction text
paste(
"The predicted species is ",
as.character(prediction))
})
output$plot = renderPlot({
#Create a scatterplot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = color_palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs width",
xlab = "Petal Length(cm)",
ylab = "Petal Width (cm)")
#plot decision boundaries
partition.tree(
tree = model,
label = "Species",
add = TRUE )
#draw predictor on plot
points(
x = input$Petal.Length,
y = input$Petal.Width,
col = "red",
pch = 4,
cex = 2,
lwd = 2)
})
}
shinyApp(
ui = ui,
server = server
)
install.packages('rsconnect')
install.packages("rsconnect")
library(RColorBrewer)
#create color palette
color.palette <- brewer.pal(3, "Set2")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library(shiny)
ui <- fluidPage("Hello World")
server <- function(input, output){}
shinyApp(
ui = ui,
server = server
)
shinyApp(
ui = ui,
server = server
)
shinyApp(
ui = ui,
server = server
)
ui <- fluidPage(
titlePanel("Input and Output"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "num",
label = "Choose a number",
min = 0,
max = 100,
value = 25)),
mainPanel(
textOutput(
outputId = "text"))))
server <- function(input, output){
output$text <- renderText({
paste("you selected", input$num)
})
}
shinyApp(
ui = ui,
server = server
)
ui <- fluidPage(
titlePanel("Input and Output"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "num",
label = "Choose a number",
min = 0,
max = 100,
value = 25)),
mainPanel(
textOutput(
outputId = "text"))))
server <- function(input, output){
output$text <- renderText({
paste("you selected", input$num)
})
}
shinyApp(
ui = ui,
server = server
)
shinyApp(
ui = ui,
server = server
)
library(tree)
load("Train.RData")
load("Tree.RData")
library(tree)
load("Train.RData")
load("Tree.RData")
library(RColorBrewer)
#create color palette
color.palette <- brewer.pal(3, "Set2")
ui <- fluidPage(
titlePanel("Iris Species Predictor"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "Petal.Length",
label = "Petal Length(cm)",
min = 1,
max = 7,
value = 4),
sliderInput(
inputId = "Petal.Width",
label = "Petal Width(cm)",
min = 0.0,
max = 2.5,
step = 0.5,
value = 1.5)),
mainPanel(
textOutput(
outputId = "text"),
plotOutput(
outputId = "plot"))))
server <- function(input, output){
output$text = renderText({
#create predictors
predictors <- data.frame(
Petal.Length = input$Petal.Length,
Petal.Width = input$Petal.Width,
Sepal.Length = 0,
Sepal.Width = 0)
#Make prediction
prediction = predict(
object = model,
newdata = predictors,
type = "class")
#create prediction text
paste(
"The predicted species is ",
as.character(prediction))
})
output$plot = renderPlot({
#Create a scatterplot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = color_palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs width",
xlab = "Petal Length(cm)",
ylab = "Petal Width (cm)")
#plot decision boundaries
partition.tree(
tree = model,
label = "Species",
add = TRUE )
#draw predictor on plot
points(
x = input$Petal.Length,
y = input$Petal.Width,
col = "red",
pch = 4,
cex = 2,
lwd = 2)
})
}
shinyApp(
ui = ui,
server = server
)
